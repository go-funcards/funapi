// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: authz_service/v1/checker.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationCheckerClient is the client API for AuthorizationChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationCheckerClient interface {
	IsGranted(ctx context.Context, in *IsGrantedRequest, opts ...grpc.CallOption) (*Granted, error)
}

type authorizationCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationCheckerClient(cc grpc.ClientConnInterface) AuthorizationCheckerClient {
	return &authorizationCheckerClient{cc}
}

func (c *authorizationCheckerClient) IsGranted(ctx context.Context, in *IsGrantedRequest, opts ...grpc.CallOption) (*Granted, error) {
	out := new(Granted)
	err := c.cc.Invoke(ctx, "/proto.v1.AuthorizationChecker/IsGranted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationCheckerServer is the server API for AuthorizationChecker service.
// All implementations must embed UnimplementedAuthorizationCheckerServer
// for forward compatibility
type AuthorizationCheckerServer interface {
	IsGranted(context.Context, *IsGrantedRequest) (*Granted, error)
	mustEmbedUnimplementedAuthorizationCheckerServer()
}

// UnimplementedAuthorizationCheckerServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationCheckerServer struct {
}

func (UnimplementedAuthorizationCheckerServer) IsGranted(context.Context, *IsGrantedRequest) (*Granted, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGranted not implemented")
}
func (UnimplementedAuthorizationCheckerServer) mustEmbedUnimplementedAuthorizationCheckerServer() {}

// UnsafeAuthorizationCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationCheckerServer will
// result in compilation errors.
type UnsafeAuthorizationCheckerServer interface {
	mustEmbedUnimplementedAuthorizationCheckerServer()
}

func RegisterAuthorizationCheckerServer(s grpc.ServiceRegistrar, srv AuthorizationCheckerServer) {
	s.RegisterService(&AuthorizationChecker_ServiceDesc, srv)
}

func _AuthorizationChecker_IsGranted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsGrantedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationCheckerServer).IsGranted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.AuthorizationChecker/IsGranted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationCheckerServer).IsGranted(ctx, req.(*IsGrantedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationChecker_ServiceDesc is the grpc.ServiceDesc for AuthorizationChecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationChecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.AuthorizationChecker",
	HandlerType: (*AuthorizationCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsGranted",
			Handler:    _AuthorizationChecker_IsGranted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authz_service/v1/checker.proto",
}
