// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: authz_service/v1/subject.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubjectClient is the client API for Subject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubjectClient interface {
	SaveSub(ctx context.Context, in *SaveSubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSub(ctx context.Context, in *DeleteSubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRef(ctx context.Context, in *DeleteRefRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubResponse, error)
}

type subjectClient struct {
	cc grpc.ClientConnInterface
}

func NewSubjectClient(cc grpc.ClientConnInterface) SubjectClient {
	return &subjectClient{cc}
}

func (c *subjectClient) SaveSub(ctx context.Context, in *SaveSubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.v1.Subject/SaveSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectClient) DeleteSub(ctx context.Context, in *DeleteSubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.v1.Subject/DeleteSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectClient) DeleteRef(ctx context.Context, in *DeleteRefRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.v1.Subject/DeleteRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectClient) GetSub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubResponse, error) {
	out := new(SubResponse)
	err := c.cc.Invoke(ctx, "/proto.v1.Subject/GetSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubjectServer is the server API for Subject service.
// All implementations must embed UnimplementedSubjectServer
// for forward compatibility
type SubjectServer interface {
	SaveSub(context.Context, *SaveSubRequest) (*emptypb.Empty, error)
	DeleteSub(context.Context, *DeleteSubRequest) (*emptypb.Empty, error)
	DeleteRef(context.Context, *DeleteRefRequest) (*emptypb.Empty, error)
	GetSub(context.Context, *SubRequest) (*SubResponse, error)
	mustEmbedUnimplementedSubjectServer()
}

// UnimplementedSubjectServer must be embedded to have forward compatible implementations.
type UnimplementedSubjectServer struct {
}

func (UnimplementedSubjectServer) SaveSub(context.Context, *SaveSubRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSub not implemented")
}
func (UnimplementedSubjectServer) DeleteSub(context.Context, *DeleteSubRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSub not implemented")
}
func (UnimplementedSubjectServer) DeleteRef(context.Context, *DeleteRefRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRef not implemented")
}
func (UnimplementedSubjectServer) GetSub(context.Context, *SubRequest) (*SubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSub not implemented")
}
func (UnimplementedSubjectServer) mustEmbedUnimplementedSubjectServer() {}

// UnsafeSubjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubjectServer will
// result in compilation errors.
type UnsafeSubjectServer interface {
	mustEmbedUnimplementedSubjectServer()
}

func RegisterSubjectServer(s grpc.ServiceRegistrar, srv SubjectServer) {
	s.RegisterService(&Subject_ServiceDesc, srv)
}

func _Subject_SaveSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServer).SaveSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.Subject/SaveSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServer).SaveSub(ctx, req.(*SaveSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subject_DeleteSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServer).DeleteSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.Subject/DeleteSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServer).DeleteSub(ctx, req.(*DeleteSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subject_DeleteRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServer).DeleteRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.Subject/DeleteRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServer).DeleteRef(ctx, req.(*DeleteRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subject_GetSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServer).GetSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.Subject/GetSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServer).GetSub(ctx, req.(*SubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Subject_ServiceDesc is the grpc.ServiceDesc for Subject service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Subject_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.Subject",
	HandlerType: (*SubjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveSub",
			Handler:    _Subject_SaveSub_Handler,
		},
		{
			MethodName: "DeleteSub",
			Handler:    _Subject_DeleteSub_Handler,
		},
		{
			MethodName: "DeleteRef",
			Handler:    _Subject_DeleteRef_Handler,
		},
		{
			MethodName: "GetSub",
			Handler:    _Subject_GetSub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authz_service/v1/subject.proto",
}
